---
layout:     post
title:      "网络编程学习2"
subtitle:   "基础编程实践"
date:       2017-7-6
author:     "Zhu Jian"
header-img: "img/network-programming-bg.jpg"
tags:
    - Network Programming
    - Linux
---

#### 目前进度 ####  
阅读《Beej's Guide to Network Programming》，看了25-68页，主要是基础的Socket编程介绍与实践：

* 准备工作：getaddrinfo()
* 取得File Descriptor：socket()
* 绑定端口：bind()
* 连接：connect()
* 监听：listen()
* 接受调用：accept()
* Stream Socket 数据传输：send() & recv()  
  Datagram Socket 数据传输：sendto() & recvfrom()
* 资源释放：close() & shutdown()
* 其他：getpeername() & gethostname()

简单的Client-Server实例，下面章节将是UNIX网络编程的高级技术部分

***

接触到Reactor模式的概念，目前的理解有些浅显，以后会逐步深入。该模式的结构图如下<img src="http://www.blogjava.net/images/blogjava_net/dlevin/Reactor_Structures.png" width="350">  

1. 初始化InitiationDispatcher，并初始化一个Handle到EventHandler的Map
2. 注册EventHandler到InitiationDispatcher中，每个EventHandler包含对相应Handle的引用，从而建立Handle到EventHandler的映射（Map）
3. 调用InitiationDispatcher的handle_events()方法以启动Event Loop。在Event Loop中，调用select()方法（Synchronous Event Demultiplexer）阻塞等待Event发生
4. 当某个或某些Handle的Event发生后，select()方法返回，InitiationDispatcher根据返回的Handle找到注册的EventHandler，并回调该EventHandler的handle_events()方法
5. 在EventHandler的handle_events()方法中还可以向InitiationDispatcher中注册新的EventHandler，比如对AcceptorEventHandler来，当有新的client连接时，它会产生新的EventHandler以处理新的连接，并注册到InitiationDispatcher中