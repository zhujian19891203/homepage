---
layout:     post
title:      "Leetcode 419"
subtitle:   "Battleships in a Board"
date:       2016-11-2
author:     "Zhu Jian"
header-img: "img/leetcode-bg.jpg"
tags:
    - Leetcode
    - Algorithm
---

## Battleships in a Board

#### 题目
Given an 2D board, count how many different battleships are in it. The battleships are represented with `'X'`s, empty slots are represented with `'.'`s. You may assume the following rules:

* You receive a valid board, made of only battleships or empty slots.
* Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape `1xN` (1 row, N columns) or `Nx1` (N rows, 1 column), where N can be of any size.
* At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.

##### Example
```
X..X
...X
...X
```
In the above board there are 2 battleships.

##### Invalid Example
```
...X
XXXX
...X
```
This is an invalid board that you will not receive - as battleships will always have a cell separating between them.

##### Follow up:
Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?

#### 解题思路
**关键：**  
由于条件3的限制，其实每两个战舰之间都是有`'*'`相隔的，只需要统计top-left的`'X'`，并且保证只统计一次即可。  
**实际操作：**  
二重循环，若当前元素的值不满足如下三个条件：  

* 值为`'.'`  
* 上方的元素为`'X'`  
* 左方的元素为`'X'`  

则统计数加1

#### Code
```
public class Solution {
    public int countBattleships(char[][] board) {
        int row = board.length;
        if(row == 0)
            return 0;
        int col = board[0].length;

        int res = 0;

        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(board[i][j] == '.')
                    continue;
                if(i > 0 && board[i-1][j] == 'X')
                    continue;
                if(j > 0 && board[i][j-1] == 'X')
                    continue;

                res++;
            }
        }

        return res;
    }
}
```

#### 番外话
*最开始代码提交N次一直失败，但是自己测试却完全OK，最后发现竟是`'X'`的大小写问题，真是尴尬！*