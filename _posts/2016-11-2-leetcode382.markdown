---
layout:     post
title:      "Leetcode 382"
subtitle:   "Linked List Random Node"
date:       2016-11-2
author:     "Zhu Jian"
header-img: "img/leetcode-bg.jpg"
tags:
    - Leetcode
    - Algorithm
---

## Linked List Random Node

#### 题目
Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

##### Follow up
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

##### Example
```
// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();
```

#### 解题思路
**关键：**[蓄水池抽样算法](https://zh.wikipedia.org/wiki/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3)  
对于不知道总数的一组数，如何等概率的取出一个数？  

* 假定最开始取第一个数
* 如果有第二个数，则有1/2的概率取第二个数
* 如果有第三个数，则有1/3的概率取第三个数  
... ...  

**原理：**  
对于第i个数，其被取到的情况是：第i个数被取到，后面（n-i）个数都取不到，其概率计算如下：  
P = (1 / i) * (i / i+1) * (i+1 / i+2) * ... * (n-1 / n) = 1 / n

#### Code
```
public class Solution {

    /** @param head The linked list's head.
    Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        this.head = head;
    }

    /** Returns a random node's value. */
    public int getRandom() {
        int res = head.val;

        int i = 2;
        ListNode cur = head.next;
        while(cur != null) {
            Random random = new Random();
            int tmp = random.nextInt(i);
            if(tmp == 0) {
                res = cur.val;
            }
            cur = cur.next;

            i++;
        }

        return res;
    }

    private ListNode head;
}

```