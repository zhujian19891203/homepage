---
layout:     post
title:      "Leetcode 384"
subtitle:   "Shuffle an Array"
date:       2016-11-4
author:     "Zhu Jian"
header-img: "img/leetcode-bg.jpg"
tags:
    - Leetcode
    - Algorithm
---

## Shuffle an Array

#### 题目
Shuffle a set of numbers without duplicates.

##### Example
```
// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();
```

#### 解题思路
**方法1：**遍历数组，每次循环求一次随机数，与当前位置的数字作交换（即对长度为N的数组随机交换N个位置）  
**方法2：**将数组存放入List中，每次从中随机选取一个元素将其放入结果数组中，然后将该元素从List中移除，重复上述步骤直至List为空

#### Code
**方法1：**  

```
public class Solution {
    public Solution(int[] nums) {
        origin = nums;
        current = nums.clone();
    }

    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return origin;
    }

    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        int len = current.length;

        for(int i = 0; i < len; i++) {
            int r = random.nextInt(len);
            int tmp = current[i];
            current[i] = current[r];
            current[r] = tmp;
        }

        return current;
    }

    private int[] origin;
    private int[] current;
    private Random random = new Random();
}

```  

**方法2：**  

```
public class Solution {
    public Solution(int[] nums) {
        this.nums = nums;
    }

    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return nums;
    }

    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        int len = nums.length;
        int[] res = new int[len];

        List<Integer> list = new ArrayList<>(len);
        for(int i = 0; i < len; i++) {
            list.add(nums[i]);
        }

        int idx = 0;
        Random random = new Random();
        while(list.size() > 0) {
            int r = random.nextInt(list.size());
            res[idx++] = list.get(r);
            list.remove(r);
        }

        return res;
    }

    private int[] nums;
}
```